// dz8_loops_part2.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cmath>



int main7() 
/*
Користувач вводить ціле число А. Програма
має визначити, що куб суми цифр цього числа дорівнює
А*А.
*/
{
    long long number_A;     // число А, вводит пользователь
    std::cout << "Enter number A: ";
    std::cin >> number_A;
    int sum;                // переменная для хранения суммы цифр числа
    long long divider = 1;  // вводим делитель, что бы вывести каждую цифру числа


    while (divider <= number_A) divider *= 10;  // цикл для нахождения нужного делителя 
    
    sum = 0;  // изначально сумме присваиваем значение 0
    short n;  // переменная для каждой отдельной цифры числа
   
    while (divider > 1)  // вложенный цикл для нахождения цифр числа 
    {      
        divider /= 10;             
        int n = number_A / divider;
       
        std::cout << n << ' '; 
        sum += n;        // сумма всех цифр числа
       
        number_A -= n * divider;
    }    
    std::cout << "Sum: " << sum << std::endl;

    // HELP HELP HELP - дальше что-то не так
    if (pow(sum, 3) == (number_A * number_A))  // условие, что куб суммы цифр А равен А*А
    {
    std::cout << pow(sum, 3) << '=' << number_A * number_A << " --> True";
    // вывела на экран с формулой, что бы было видно как считает
    // pow(sum, 3) - считает верно, а number_A * number_A = выводит 0. Не понимаю, где ошибка,
    }
    else
    {
    std::cout << pow(sum, 3) << '=' << number_A * number_A << " - False";
    }
     
    return 0;

}

int main6()
/*
Користувач вводить два цілих числа. 
Необхідно вивести всі цілі числа, 
на які обидва введені числа діляться без залишку.
*/
{
    long long A;        // число А
    long long B;        // число В
    long long divider;  // делитель

    std::cout << "Enter number A: ";
    std::cin >> A;
    std::cout << "Enter number B: ";
    std::cin >> B;

    for (divider = 1; divider <= A && divider <=B; ++divider)
    {
        if (A % divider == 0 && B % divider ==0)
        {
            std::cout << divider << ' ';
        }
    }
    // цикл и условие аналогичне задаче следующей, и след. после следующей. Да?)
   
    return 0;

}


int main5()
/*
Користувач вводить ціле число. Необхідно
вивести всі цілі числа, на які задане число ділиться без
залишку.
*/
{
    long long A;  // число А, вводит пользователь
    long long B;  // делитель В

    std::cout << "Enter number A: ";
    std::cin >> A;

    for (B = 1; B <= A; ++B)  // цикл - устанавливаем рамки для В, плюсуем +1 каждый раз и проверяем на условии
    {
        if (A % B == 0 )      // условие  - если А делиться на В без остатка - выводим В
        {
            std::cout << B << ' ';
        }
    }

    return 0;

}



int main4()
/*
Користувач вводить будь-яке ціле число А.
Необхідно вивести всі цілі числа В, для яких А ділиться
без залишку на В*В і не ділиться без залишку на В*В*В.
*/
{

   long long number_A;   // число А, вводимое пользователем
   long long divider_B;  // делитель В, изменяется
   
   std::cout << "Enter number A: ";
   std::cin >> number_A;
    
   for (divider_B = 1; divider_B * divider_B <= number_A; ++divider_B)  // цикл - установили промежуток для делителя В
                                                                        // плюсуем +1 к В
   { 
       if (number_A % (divider_B * divider_B) == 0                      // условие
           && number_A % (divider_B * divider_B * divider_B) != 0)
       {
            std::cout << divider_B << ' ';                              // вывод делителей В, которые подходят под условия
       }  
       
       else                     // HELP HELP HELP
       {                        // в else я хотела вывести решения, при которым для числа А нет подходящих делителей В
           continue;            // но ничего не получается - либо у меня этот вывод зацикливается, либо выводит
           std::cout << "No";   // вместо имеющегося делителя В, либо вообще не выводит
       }   
    }

    return 0;

}



int main3()
/*
Підрахувати кількість цілих чисел у діапазоні
від 100 до 999, у яких усі цифри різні.
*/
{
    short number_start = 100;  // число начала отсчета, short - достаточно для диапазона от 100 до 999 
    short number_end = 999;    // число окончания отсчета, short - достаточно для диапазона от 100 до 999
    short n;                   // переменная для изменяемого числа (от 100 до 999)
    short res = 0;             // переменная для результата


    for (n = number_start; n <= number_end; ++n)  // цикл - условие - что бы программа перебрала все числа от 100 до 999
    {
        short n1 = n / 100;                       // первая цифра числа n
        short n2 = (n / 10) - ((n / 100) * 10);   // вторая цифра числа n
        short n3 = n - ((n / 10) * 10);           // третья цифра числа n

        if (n1 == n2 || n1 == n3 || n2 == n3)     // условиe - 2 цифры в числе должны равны 
        {
            continue;                             // если условие true - цикл это число пропускает и идет дальше
        }
        else
        {
            std::cout << n << ' ';                // вывод чисел, подпадающих под условия 
                                                  // (не подпадающих под if, которые прошли дальше) 
            res += 1;                             // счетчик чисел, которые прошли
        }
    }
    std::cout << std::endl << "Number's amount without same numbers is: " << res << std::endl;

    return 0;

}



int main2()
/*
Підрахувати кількість цілих чисел у діапазоні
від 100 до 999, які мають дві однакові цифри.
*/
{
    short number_start = 100;  // число начала отсчета, short - достаточно для диапазона от 100 до 999 
    short number_end = 999;    // число окончания отсчета, short - достаточно для диапазона от 100 до 999
    short n;                   // переменная для изменяемого числа (от 100 до 999)
    short res = 0;             // переменная для результата

   
    
    for (n = number_start; n <= number_end; ++n)  // цикл - условие - что бы программа перебрала все числа от 100 до 999
    {
        short n1 = n / 100;                       // первая цифра числа n
        short n2 = (n / 10) - ((n / 100) * 10);   // вторая цифра числа n
        short n3 = n - ((n / 10) * 10);           // третья цифра числа n
            
        if (n1 == n2 && n1 != n3                  // условия - 2 цифры в числе должны равны 
                || n1 == n3 && n1 != n2           // (но при этом не равны все 3 цифры)
                || n2 == n3 && n2 != n1)          
            {                                     
            std::cout << n << ' ';                // вывод чисел, подпадающих под условия (эту строку можно убрать, 
                                                  // я оставила что бы можно было пересчитать и убедится, что все верно)
            res += 1;                             // при условии выше - к результату добавляем единицу
            }                                     
    }
   
    std::cout << std::endl << "Number's amount with two same numbers is: " << res << std::endl;
   
    return 0;

}



int main1()
/*
Користувач вводить будь-яке ціле число.
Необхідно з цього цілого числа видалити всі цифри 3 і 6
і вивести назад на екран.
*/
{
    long long number;                // число, вводимое пользователем, long long для больших чисел

    std::cout << "Enter number: ";
    std::cin >> number;
     
    long long divider = 1;           // вводим делитель, long long для больших чисел, присваиваем делителю значение 1

    while (divider <= number)        // предусловие - пока делитель <= number
    {
        divider *= 10;               // цикл - умножаеим делитель на 10
    }
    while (divider > 1)              // предусловие - пока делитель > 1
    {
        divider /= 10;               // цикл - делим делитель на 10
        short n = number / divider;  // вводим n, short - т.к. n - всегда будет одна цифра, n = number / делитель
        if (n != 3 && n != 6)        // условие для вывода только тех n, которые не равны 3 и 6
        {
            std::cout << n << ' ';
        }
        number -= n * divider;       // что бы узнать следующий n - нужно новый number - без 1ой цифры
                                     // каждый новый number - минусуем предыдущий (n * делитель)
    }
    std::cout << std::endl;

    return 0;
}

